using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TrainPartsHandler : MonoBehaviour {
    static public int partsCnt = 0;

    void Start() {
    }

    Vector3 cord;
    void Update() {

    }
    private bool needToJoint = false;
    private bool isCollided = false;
    private GameObject toColide;
    private void LateUpdate() {
    /*    if(needToJoint && !isCollided) {
            var sp = gameObject.AddComponent<FixedJoint>();
            sp.connectedBody = toColide.GetComponent<Rigidbody>();
        } else {
            isCollided = false;
        }*/
    }
    void OnCollisionEnter(Collision collision) {
        if (
            collision.gameObject.tag == "TrainPart" &&
            (GetComponent<FixedJoint>() == null || GetComponent<FixedJoint>().connectedBody != this || collision.gameObject.GetComponent<FixedJoint>() == null || collision.gameObject.GetComponent<FixedJoint>().connectedBody != this)
        ) {
            isCollided = true;
            needToJoint = true;
            /*
              toColide = collision.gameObject;
              Rigidbody rg = GetComponent<Rigidbody>();
              rg.constraints = RigidbodyConstraints.FreezeRotationX | RigidbodyConstraints.FreezeRotationZ | RigidbodyConstraints.FreezePositionY;
              Destroy(gameObject.GetComponent<Drag>());
              */

            /*
            ++partsCnt;
            var gameObject = collision.gameObject;
            Destroy(gameObject.GetComponent<Drag>());

            Collider collider = gameObject.GetComponent<Collider>();
            LayerMask mask = LayerMask.GetMask("Vagon");
            Collider[] cols = Physics.OverlapBox(collider.bounds.center, collider.bounds.extents, Quaternion.identity, mask);
            Vector3 bestPoint = Vector3.zero;
            float closestSqrDistance = Mathf.Infinity;

            for (int i = 0; i < cols.Length; i++) {
                Vector3 pos = cols[i].ClosestPointOnBounds(collider.bounds.center);
                Vector3 direction = pos - collider.bounds.center;
                float sqrDist = direction.sqrMagnitude;
                if (sqrDist < closestSqrDistance && cols[i].gameObject != gameObject) {
                    closestSqrDistance = sqrDist;
                    bestPoint = pos;
                }
            }
            
            Debug.DrawRay(bestPoint, Vector3.up * 3, Color.red);
            Vector3[] allbounds = GetColliderVertexPositions(gameObject, collider);
            float minDist = 500;
            Vector3 bestColPoint = Vector3.zero;
            foreach(var point in allbounds) {
                var dist = Vector3.Distance(point, bestPoint);
                if (dist < minDist) {
                    bestColPoint = point;
                    minDist = dist;
                }
            }            

            Debug.DrawRay(bestColPoint, Vector3.up * 5, Color.blue);
            Vector3 moveVector = bestPoint - bestColPoint;

            Debug.DrawRay(gameObject.transform.position + moveVector, Vector3.up * 8, Color.green);
            moveVector.z = 0;
            if (moveVector.x > moveVector.y) moveVector.y = 0;
            if (moveVector.y > moveVector.x) moveVector.x = 0;
            gameObject.transform.position = gameObject.transform.position + moveVector;            

            var sp = gameObject.AddComponent<FixedJoint>();
            sp.connectedBody = GetComponent<Rigidbody>();
            */
            var sp = gameObject.AddComponent<FixedJoint>();
            sp.connectedBody = GetComponent<Rigidbody>();
        }
    }
    private Vector3[] GetColliderVertexPositions(GameObject obj, Collider col){
        var vertices = new Vector3[8];
        var thisMatrix = obj.transform.localToWorldMatrix;
        var storedRotation = obj.transform.rotation;
        obj.transform.rotation = Quaternion.identity;

        var extents = col.bounds.extents;
        vertices[0] = thisMatrix.MultiplyPoint3x4(extents);
        vertices[1] = thisMatrix.MultiplyPoint3x4(new Vector3(-extents.x, extents.y, extents.z));
        vertices[2] = thisMatrix.MultiplyPoint3x4(new Vector3(extents.x, extents.y, -extents.z));
        vertices[3] = thisMatrix.MultiplyPoint3x4(new Vector3(-extents.x, extents.y, -extents.z));
        vertices[4] = thisMatrix.MultiplyPoint3x4(new Vector3(extents.x, -extents.y, extents.z));
        vertices[5] = thisMatrix.MultiplyPoint3x4(new Vector3(-extents.x, -extents.y, extents.z));
        vertices[6] = thisMatrix.MultiplyPoint3x4(new Vector3(extents.x, -extents.y, -extents.z));
        vertices[7] = thisMatrix.MultiplyPoint3x4(-extents);

        obj.transform.rotation = storedRotation;
        return vertices;
    }
}
